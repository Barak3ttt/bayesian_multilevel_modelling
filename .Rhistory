options(max.print= 120,
width = 90,
tibble.width = 80)
knitr::opts_chunk$set(echo= TRUE,
cache=FALSE,
prompt=FALSE,
tidy="styler",
comment=NA,
message=FALSE,
warning=TRUE)
knitr::opts_knit$set(width=90)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
set.seed(42)
# 0) Install & load httr for HTTP requests
if (!requireNamespace("httr", quietly = TRUE)) {
install.packages("httr", repos = "https://cran.rstudio.com/")
}
library(httr)
# 1) Kaggle credentials
user <- "barakazor"
key  <- "6bfceda688e1452d09191636ad94eeeb"
# 2) Define working and data directories
wd        <- getwd()
data_dir  <- file.path(wd, "data")
input_dir <- file.path(wd, "Input_Data")
if (!dir.exists(data_dir))  dir.create(data_dir, recursive = TRUE)
if (!dir.exists(input_dir)) dir.create(input_dir, recursive = TRUE)
# 3) Download the ZIP via Kaggle REST API
dataset_slug <- "kirtandelwadia/corporate-credit-rating-with-financial-ratios"
zip_path     <- file.path(data_dir, "credit_rating.zip")
download_url <- paste0("https://www.kaggle.com/api/v1/datasets/download/", dataset_slug)
resp <- GET(
url             = download_url,
authenticate(user, key),
write_disk(zip_path, overwrite = TRUE),
config(followlocation = TRUE)
)
stop_for_status(resp)
# 4) Unzip into data_dir
unzipped <- unzip(zip_path, exdir = data_dir)
csvs     <- unzipped[grepl("\\.csv$", unzipped)]
if (length(csvs) == 0) stop("No CSV found in the downloaded ZIP.")
# 5) Read the first CSV into R
df_raw <- read.csv(csvs[1], stringsAsFactors = FALSE)
# 6) Save to Input_Data/
write.csv(
df_raw,
file      = file.path(input_dir, "df_raw.csv"),
row.names = FALSE
)
saveRDS(
df_raw,
file = file.path(input_dir, "df_raw.rds")
)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(janitor)
install.packages("janitor")
library(tidyverse)
library(janitor)
df_raw <- read_csv("df_raw.csv") %>% clean_names()
library(tidyverse)
library(janitor)
df_raw <- read_csv(input_dir, "df_raw.csv") %>% clean_names()
## 2·1  response  – ordered factor
rating_levels <- c("AAA","AA+","AA","AA-","A+","A","A-",
"BBB+","BBB","BBB-","BB+","BB","BB-",
"B+","B","B-","CCC","CC","C","D")
df <- df_raw %>%
mutate(
rating_ord   = factor(rating, levels = rating_levels, ordered = TRUE),
sector       = fct_lump_n(sector, 10),            # keep 10 biggest
corporation  = as.factor(corporation),
fiscal_year  = lubridate::year(lubridate::ymd(rating_date)),
fiscal_year  = as.factor(fiscal_year)
) %>%
## 2·2  predictors  – z-score continuous ratios
mutate(across(
c(current_ratio, debt_equity_ratio, gross_margin,
operating_margin, net_profit_margin, roa_return_on_assets),
~ as.numeric(scale(.x)),
.names = "z_{col}"
)) %>%
drop_na(rating_ord, sector, corporation)        # 7 808 ⇒ 7 534 rows
library(tidyverse)
library(janitor)
df_raw <- read_csv(file.path(input_dir, "df_raw.csv")) %>% clean_names()
## 2·1  response  – ordered factor
rating_levels <- c("AAA","AA+","AA","AA-","A+","A","A-",
"BBB+","BBB","BBB-","BB+","BB","BB-",
"B+","B","B-","CCC","CC","C","D")
df <- df_raw %>%
mutate(
rating_ord   = factor(rating, levels = rating_levels, ordered = TRUE),
sector       = fct_lump_n(sector, 10),            # keep 10 biggest
corporation  = as.factor(corporation),
fiscal_year  = lubridate::year(lubridate::ymd(rating_date)),
fiscal_year  = as.factor(fiscal_year)
) %>%
## 2·2  predictors  – z-score continuous ratios
mutate(across(
c(current_ratio, debt_equity_ratio, gross_margin,
operating_margin, net_profit_margin, roa_return_on_assets),
~ as.numeric(scale(.x)),
.names = "z_{col}"
)) %>%
drop_na(rating_ord, sector, corporation)
View(df)
View(df)
# 1. Set your working directory to the root of your project
setwd("C:\Users\azorb\PycharmProjects\bmmProject")
# 1. Set your working directory to the root of your project
setwd("C:\Users\azorb\PycharmProjects\bmmProject")
# 1. Set working directory
setwd("C:/Users/azorb/PycharmProjects/bmmProject")
# 2. (Re-)initialize git and set remote
system("git init")
system("git remote remove origin", ignore.stderr = TRUE)
system("git remote add origin https://github.com/Barak3ttt/bayesian_multilevel_modelling.git")
# 3. Stage & commit
system("git add -A")
system("git commit -m \"BMM Logistic Regression with Hyperparameter Tuning\"")
system("git branch -M main")
# 4. Push to GitHub
system("git push -u origin main --force")
